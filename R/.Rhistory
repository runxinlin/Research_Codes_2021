####Holding Period####
port_2 <- holding_return_list[[1]][,intersect(SMB[[1]][[2]],HML[[1]][[1]])]
port_2 <- port_2 %>% select_if(~sum(is.na(.)) == 0) %>% select_if(~!all(.==0))
#1.Create starting share levels for each portfolio determined by share weights
starting_weights = rep(1,length(port_2))
#2.Grow share levels by daily returns over holding period
level_2 <- rbind(starting_weights, port_2 + 1)
#we can add na.rm=T to rollapply to see how this will change the data, and it's important!!!
level_2 <- round(rollapply(level_2, FUN = prod, width = 1:(Holding+1), align = "right", na.rm=T), 2)
#3.Sum portfolio share levels for each day
value_2 <- rowSums(level_2, na.rm = T)
length(value_2)
#4.Calculate returns from portfolio values
#The following codes used to calculate the return rate
returns_2 = round(log(value_2[2:length(value_2)]/value_2[1:(length(value_2)-1)]),4)
length(returns_2)
####Generalized Holding Period Calculations####
hld_period_calcs2 <- function(a, b, c, weights =1, port_number1, port_number2){
temp <- intersect(c[[port_number2]],b[[port_number1]])
if(length(temp) == 0){
port <- data.frame(zeros = rep(0, Holding))
} else {port <- a[,temp]}
# a is holding_period_return, b for HML list, c for SMB list, port_number1 for HML, port_number2 for SMB
port <- port %>% select_if(~sum(is.na(.)) == 0) %>% select_if(~!all(.==0))
starting_weights = rep(weights, length(port))
level = rbind(starting_weights,as.data.frame(port)+1)
level = rollapply(level, FUN = prod, width = 1:(Holding +1), align = "right")
value = rowSums(level, na.rm = T)
# returns = round(((value[2:length(value)] - value[1:(length(value)-1)])/value[1:(length(value)-1)]),4) # simple return
returns = round(log(value[2:length(value)]/value[1:(length(value)-1)]),4) # log return
return(returns)
}
test1 <- data.frame(hld_period_calcs2(a= holding_return_list[[1]],b = HML[[1]], c = SMB[[1]],port_number1=3, port_number2=1))
test2 <- Map(hld_period_calcs2, a= holding_return_list,b = RMW, c = SMB, port_number1=3, port_number2=1)
#In "Map(hld_period_calcs, holding_return_list, portfolio_names, port_number=1)", which means that
#we need to map holding_return_list, portfolios_names and port_number =1 into the function hld_period_calcs(),
#in where a is holding_return_list, b is portfolio_names and port_number = 1, weight = 1
portfolio_df2 <- data.frame(Dates = df_return$Dates[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
MR_RF = df_return$MR_RF[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
B_Value = unlist(Map(hld_period_calcs2, holding_return_list, HML, SMB,
port_number1 = 1, port_number2 = 2)),
B_Neutral_PE = unlist(Map(hld_period_calcs2, holding_return_list, HML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Growth = unlist(Map(hld_period_calcs2, holding_return_list, HML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Robust = unlist(Map(hld_period_calcs2, holding_return_list, RMW, SMB,
port_number1 = 3, port_number2 = 2)),
B_Neutral_OP = unlist(Map(hld_period_calcs2, holding_return_list, RMW, SMB,
port_number1 = 2, port_number2 = 2)),
B_Weak = unlist(Map(hld_period_calcs2, holding_return_list, RMW, SMB,
port_number1 = 1, port_number2 = 2)),
B_Conservative= unlist(Map(hld_period_calcs2, holding_return_list, CMA, SMB,
port_number1 = 1, port_number2 = 2)),
B_Neutral_INV = unlist(Map(hld_period_calcs2, holding_return_list, CMA, SMB,
port_number1 = 2, port_number2 = 2)),
B_Aggressive = unlist(Map(hld_period_calcs2, holding_return_list, CMA, SMB,
port_number1 = 3, port_number2 = 2)),
S_Value = unlist(Map(hld_period_calcs2, holding_return_list, HML, SMB,
port_number1 = 1, port_number2 = 1)),
S_Neutral_PE = unlist(Map(hld_period_calcs2, holding_return_list, HML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Growth = unlist(Map(hld_period_calcs2, holding_return_list, HML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Robust = unlist(Map(hld_period_calcs2, holding_return_list, RMW, SMB,
port_number1 = 3, port_number2 = 1)),
S_Neutral_OP = unlist(Map(hld_period_calcs2, holding_return_list, RMW, SMB,
port_number1 = 2, port_number2 = 1)),
S_Weak = unlist(Map(hld_period_calcs2, holding_return_list, RMW, SMB,
port_number1 = 1, port_number2 = 1)),
S_Conservative= unlist(Map(hld_period_calcs2, holding_return_list, CMA, SMB,
port_number1 = 1, port_number2 = 1)),
S_Neutral_INV = unlist(Map(hld_period_calcs2, holding_return_list, CMA, SMB,
port_number1 = 2, port_number2 = 1)),
S_Aggressive = unlist(Map(hld_period_calcs2, holding_return_list, CMA, SMB,
port_number1 = 3, port_number2 = 1))
)
count_nas <- sapply(portfolio_df2, function(x){sum(is.na(x))})
count_nas
#port = holding_list[[port_number]][,portfolio_names[[port_number]][[port_number]]]
#Remember the diff bet [] and [[]], for which the [] bring us a list, while the [[]] bring us the element of the list
####Plotting our results and running our model####
#### We need to clean some extreme values.
portfolio_clean2 <- portfolio_df2
# portfolio_clean2 <- portfolio_df2 %>%
#     filter_at(vars(names(.[,2:8])),all_vars(.>-0.4 & .<0.4 & !is.na(.)))
# count_nas <- sapply(portfolio_clean2, function(x){sum(is.na(x))})
# count_nas
portfolio_clean2 <- portfolio_clean2 %>%
mutate(Market_Level = rollapply((1+MR_RF),FUN = prod, width=1:nrow(portfolio_clean2),align="right"),
SMB = round((1/3)*((1/3)*(S_Value+S_Neutral_PE+S_Growth)-
(1/3)*(B_Value+B_Neutral_PE+B_Growth)+
(1/3)*(S_Robust+S_Neutral_OP+S_Growth)-
(1/3)*(B_Robust+B_Neutral_OP+B_Growth)+
(1/3)*(S_Conservative+S_Neutral_INV+S_Aggressive)-
(1/3)*(B_Conservative+B_Neutral_INV+B_Aggressive)),4),
HML = round((1/2)*(S_Value+B_Value)-(1/2)*(S_Growth+B_Growth),4),
RMW = round((1/2)*(S_Robust+B_Robust)-(1/2)*(S_Weak+B_Weak),4),
CMA = round((1/2)*(S_Conservative+B_Conservative)-(1/2)*(S_Aggressive+B_Aggressive),4),
SMB_Level = rollapply((1+SMB),
FUN = prod, width=1:nrow(portfolio_clean2),align="right"),
HML_Level = rollapply((1+HML),
FUN = prod, width=1:nrow(portfolio_clean2),align="right"),
RMW_Level = rollapply((1+RMW),
FUN = prod, width=1:nrow(portfolio_clean2),align="right"),
CMA_Level = rollapply((1+CMA),
FUN = prod, width=1:nrow(portfolio_clean2),align="right"),
WML_Level = portfolio_clean$WML_Level)
portfolio_clean2 %>%
select(Dates, MKT = Market_Level, SMB = SMB_Level, HML = HML_Level, RMW = RMW_Level, CMA = CMA_Level) %>%
gather(key = "Strategy", value = "Value", -1) %>%
ggplot(aes(x=Dates, y=Value,colour=Strategy))+
geom_line(size=1)+
theme_bw()+
ggtitle("Cumulative Log-performance of Equal-Weight Risk Factors")
# theme(text = element_text(size = 15),
#       panel.grid.major.y = element_line(color = "grey",
#                                         size = 0.7,
#                                         linetype = 2))+
# geom_text(
#   data = . %>% filter(Dates == max(Dates)),
#   aes(label = round(Value, 2)),
#   vjust = "outward", hjust = "outward",fontface ="plain", color = "black", size = 4, check_overlap = T,
#   show.legend = FALSE)
####Carhart4-factor####
hld_period_calcs4 <- function(a, b, c, weights =1, port_number1, port_number2){
temp <- intersect(c[[port_number2]],b[[port_number1]])
if(length(temp) == 0){
port <- data.frame(zeros = rep(0, Holding))
} else {port <- a[,temp]}
# a is holding_period_return, b for HML list, c for SMB list, port_number1 for HML, port_number2 for SMB
port <- port %>% select_if(~sum(is.na(.)) == 0) %>% select_if(~!all(.==0))
if (length(port)==0){
port <- rep(0, Holding)
} else{
starting_weights = rep(weights, length(port))
level = rbind(starting_weights,as.data.frame(port)+1)
level = rollapply(level, FUN = prod, width = 1:(Holding +1), align = "right")
value = rowSums(level, na.rm = T)
# returns = round(((value[2:length(value)] - value[1:(length(value)-1)])/value[1:(length(value)-1)]),4) # simple return
returns = round(log(value[2:length(value)]/value[1:(length(value)-1)]),4) # log return
return(returns)}
} # the returns of WML[[19]][[2]]$SMB[[19]][[2]] is full of zeros
portfolio_df4 <- data.frame(Dates = df_return$Dates[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
MR_RF = df_return$MR_RF[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
B_Value = unlist(Map(hld_period_calcs4, holding_return_list, HML, SMB,
port_number1 = 1, port_number2 = 2)),
B_Neutral_PB = unlist(Map(hld_period_calcs4, holding_return_list, HML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Growth = unlist(Map(hld_period_calcs4, holding_return_list, HML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Winner = unlist(Map(hld_period_calcs4, holding_return_list, WML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Neutral_MOM = unlist(Map(hld_period_calcs4, holding_return_list, WML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Loser = unlist(Map(hld_period_calcs4, holding_return_list, WML, SMB,
port_number1 = 1, port_number2 = 2)),
S_Value = unlist(Map(hld_period_calcs4, holding_return_list, HML, SMB,
port_number1 = 1, port_number2 = 1)),
S_Neutral_PB = unlist(Map(hld_period_calcs4, holding_return_list, HML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Growth = unlist(Map(hld_period_calcs4, holding_return_list, HML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Winner = unlist(Map(hld_period_calcs4, holding_return_list, WML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Neutral_MOM = unlist(Map(hld_period_calcs4, holding_return_list, WML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Loser = unlist(Map(hld_period_calcs4, holding_return_list, WML, SMB,
port_number1 = 1, port_number2 = 1)))
count_nas <- sapply(portfolio_df4, function(x){sum(is.na(x))})
count_nas
portfolio_clean4 <- portfolio_df4
# portfolio_clean4 <- portfolio_df4 %>%
#     filter_at(vars(names(.[,2:8])),all_vars(.>-0.4 & .<0.4 & !is.na(.)))
# count_nas <- sapply(portfolio_clean4, function(x){sum(is.na(x))})
# count_nas
portfolio_clean4 <- portfolio_clean4 %>%
mutate(Market_Level = rollapply((1+MR_RF),FUN = prod, width=1:nrow(portfolio_clean2),align="right"),
SMB = round((1/2)*((1/3)*(S_Value+S_Neutral_PB+S_Growth)-
(1/3)*(B_Value+B_Neutral_PB+B_Growth)+
(1/3)*(S_Winner+S_Neutral_MOM+S_Loser)-
(1/3)*(B_Winner+B_Neutral_MOM+B_Loser)),4),
HML = round((1/2)*(S_Value+B_Value)-(1/2)*(S_Growth+B_Growth),4),
WML = round((1/2)*(S_Winner+B_Winner)-(1/2)*(S_Loser+B_Loser),4),
SMB_Level = rollapply((1+SMB),
FUN = prod, width=1:nrow(portfolio_clean4),align="right"),
HML_Level = rollapply((1+HML),
FUN = prod, width=1:nrow(portfolio_clean4),align="right"),
WML_Level = rollapply((1+WML),
FUN = prod, width=1:nrow(portfolio_clean4),align="right"))
portfolio_clean4 %>%
select(Dates, MKT = Market_Level, SMB = SMB_Level, HML = HML_Level, WML = WML_Level) %>%
gather(key = "Strategy", value = "Value", -1) %>%
ggplot(aes(x=Dates, y=Value,colour=Strategy))+
geom_line(size=1)+
theme_bw()+
ggtitle("Cumulative Log-performance of Equal-Weight Risk Factors")
####FF-3 Factor####
hld_period_calcs3 <- function(a, b, c, weights =1, port_number1, port_number2){
temp <- intersect(c[[port_number2]],b[[port_number1]])
if(length(temp) == 0){
port <- data.frame(zeros = rep(0, Holding))
} else {port <- a[,temp]}
# a is holding_period_return, b for HML list, c for SMB list, port_number1 for HML, port_number2 for SMB
port <- port %>% select_if(~sum(is.na(.)) == 0) %>% select_if(~!all(.==0))
starting_weights = rep(weights, length(port))
level = rbind(starting_weights,port+1)
level = rollapply(level, FUN = prod, width = 1:(Holding +1), align = "right")
value = rowSums(level,na.rm = T)
# returns = round(((value[2:length(value)] - value[1:(length(value)-1)])/value[1:(length(value)-1)]),4) # simple return
returns = round(log(value[2:length(value)]/value[1:(length(value)-1)]),4) # log return
return(returns)
}
test3 <- data.frame(hld_period_calcs3(a= holding_return_list[[1]],b = HML[[1]], c = SMB[[1]],port_number1=1, port_number2=1))
test4 <- Map(hld_period_calcs3, a= holding_return_list,b = HML, c = SMB, port_number1=3, port_number2=1)
Lookback <- trading_days
Periods <- trunc((Len-Lookback-Gap)/Holding)
Periods
portfolio_df3 <- data.frame(Dates = df_return$Dates[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
MR_RF = df_return$MR_RF[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
B_Value = unlist(Map(hld_period_calcs3, holding_return_list, HML, SMB,
port_number1 = 1, port_number2 = 2)),
B_Neutral_PE = unlist(Map(hld_period_calcs3, holding_return_list, HML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Growth = unlist(Map(hld_period_calcs3, holding_return_list, HML, SMB,
port_number1 = 3, port_number2 = 2)),
S_Value = unlist(Map(hld_period_calcs3, holding_return_list, HML, SMB,
port_number1 = 1, port_number2 = 1)),
S_Neutral_PE = unlist(Map(hld_period_calcs3, holding_return_list, HML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Growth = unlist(Map(hld_period_calcs3, holding_return_list, HML, SMB,
port_number1 = 3, port_number2 = 1))
)
count_nas <- sapply(portfolio_df3, function(x){sum(is.na(x))})
count_nas
####Plotting our results and running our model####
#### We need to clean some extreme values.
portfolio_clean3 <- portfolio_df3
# portfolio_clean3 <- portfolio_df3 %>%
#   filter_at(vars(names(.[,2:8])),all_vars(.>-0.4 & .<0.4 & !is.na(.)))
# count_nas <- sapply(portfolio_clean3, function(x){sum(is.na(x))})
# count_nas
portfolio_clean3 <- portfolio_clean3 %>%
mutate(Market_Level = rollapply((1+MR_RF),FUN = prod, width=1:nrow(portfolio_clean3),align="right"),
SMB = (1/3)*(S_Value+S_Neutral_PE+S_Growth)-(1/3)*(B_Value+B_Neutral_PE+B_Growth),
HML = (1/2)*(S_Value+B_Value)-(1/2)*(S_Growth+B_Growth),
SMB_Level = rollapply((1+SMB),
FUN = prod, width=1:nrow(portfolio_clean3),align="right"),
HML_Level = rollapply((1+HML),
FUN = prod, width=1:nrow(portfolio_clean3),align="right"))
portfolio_clean3 %>%
select(Dates, MKT = Market_Level, SMB = SMB_Level, HML = HML_Level) %>%
gather(key = "Strategy", value = "Value", -1) %>%
ggplot(aes(x=Dates, y=Value,colour=Strategy))+
geom_line(size=1)+
theme_bw()+
ggtitle("Cumulative Log-performance of Equal-Weight Risk Factors")
# theme(text = element_text(size = 15),
#       panel.grid.major.y = element_line(color = "grey",
#                                         size = 0.7,
#                                         linetype = 2))+
# geom_text(
#   data = . %>% filter(Dates == max(Dates)),
#   aes(label = round(Value, 2)),
#   vjust = "outward", hjust = "outward",fontface ="plain", color = "black", size = 4, check_overlap = T,
#   show.legend = FALSE)
####Regression Section####
df_SR <- df_return[,-2]
head(df_SR)
#### CAPM (Simulation (compare the bias of FM, IV))
#### CAPM (OLS & IV) sorted
head(df_MR)
#### FF3-factor (OLS & IV) sorted
df_FF3 <- portfolio_clean3 %>% select(Dates, MR_RF, SMB, HML)
#### Carhart4-factor (OLS & IV)
tmp1 <- portfolio_clean3 %>% select(Dates, MR_RF, SMB, HML)
tmp2 <- portfolio_clean %>% select(Dates,WML)
df_FF4 <- merge(tmp1,tmp2,by.y = 'Dates')
#### FF5-factor (OLS & IV) sorted
df_FF5 <- portfolio_clean2 %>% select(Dates, MR_RF, SMB, HML, RMW, CMA)
#### FF3-factor(adding CS factors as control variables in IV) sorted
Dates <- df_Size$Dates
df_ln_Size <- log(df_Size[,-1])
df_ln_Size <-  apply(t(df_ln_Size), MARGIN = 2, scale)
df_ln_Size <- cbind(Dates,data.frame(t(df_ln_Size)))
colnames(df_ln_Size) <- colnames(df_Size)
# test wither the cross-section mean is 0 now
# apply(df_ln_Size[,-1], 1, mean, na.rm =T)
#Standardization: re-scale cross-sectional firm characteristics (PE,OP,INV)
#(x - mean(x)) / sd(x)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
df_std_PE <-  apply(t(df_PE[, -1]), 2, scale)
df_std_PE <- cbind(Dates,data.frame(t(df_std_PE)))
colnames(df_std_PE)<- colnames(df_PE)
df_std_OP <-  apply(t(df_OP[, -1]), 2, scale)
df_std_OP <- cbind(Dates,data.frame(t(df_std_OP)))
colnames(df_std_OP)<- colnames(df_OP)
df_std_INV <-  apply(t(df_INV[, -1]), 2, scale)
df_std_INV <- cbind(Dates,data.frame(t(df_std_INV)))
colnames(df_std_INV)<- colnames(df_INV)
#### Compare CS and TS model####
df_12_PR = portfolio_df4[,-2]
# Firm characteristics of these 18 portfolios are calculated by the equal-weighted mean of firm characteristics
# for individual stocks in each portfolio. Then these firm characteristics are standardized by z-score (0,1)
####df_12_Size####
hld_size_calcs <- function(a, b, c, port_number1, port_number2){
temp <- intersect(c[[port_number2]],b[[port_number1]])
port <- a[,temp]
# a is holding_size_list, b for HML list, c for SMB list, port_number1 for HML, port_number2 for SMB
# Only select the row that do not have na or full of 0s
port <- port %>% select_if(~sum(is.na(.)) == 0) %>% select_if(~!all(.==0))
row_mean = rollapply(port, FUN = mean, width = 1:(Holding +1), align = "right",by.column = F)
return(row_mean)
}
test5 <- data.frame(hld_size_calcs(a= holding_size_list[[1]],b = HML[[1]], c = SMB[[1]],port_number1=1, port_number2=1))
test6 <- Map(hld_size_calcs, a= holding_size_list,b = HML, c = SMB, port_number1=1, port_number2=1)
#In "Map(hld_size_calcs, holding_size_list, portfolio_names, port_number=1)", which means that
#we need to map holding_size_list, portfolios_names, port_number1 and port_number2 into the function hld_size_calcs(),
#in where a is holding_size_list, b/c are portfolio_names and weight = 1
Lookback <- trading_days
Periods <- trunc((Len-Lookback-Gap)/Holding)
Periods
df_12_size <- data.frame(Dates = df_return$Dates[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
B_Value = unlist(Map(hld_size_calcs, holding_size_list, HML, SMB,
port_number1 = 1, port_number2 = 2)),
B_Neutral_PE = unlist(Map(hld_size_calcs, holding_size_list, HML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Growth = unlist(Map(hld_size_calcs, holding_size_list, HML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Winner = unlist(Map(hld_size_calcs, holding_size_list, WML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Neutral_MOM = unlist(Map(hld_size_calcs, holding_size_list, WML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Loser = unlist(Map(hld_size_calcs, holding_size_list, WML, SMB,
port_number1 = 1, port_number2 = 2)),
S_Value = unlist(Map(hld_size_calcs, holding_size_list, HML, SMB,
port_number1 = 1, port_number2 = 1)),
S_Neutral_PE = unlist(Map(hld_size_calcs, holding_size_list, HML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Growth = unlist(Map(hld_size_calcs, holding_size_list, HML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Winner = unlist(Map(hld_size_calcs, holding_size_list, WML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Neutral_MOM = unlist(Map(hld_size_calcs, holding_size_list, WML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Loser = unlist(Map(hld_size_calcs, holding_size_list, WML, SMB,
port_number1 = 1, port_number2 = 1))
)
count_nas <- sapply(df_12_size, function(x){sum(is.na(x))})
count_nas
Dates <- df_12_PR$Dates
### cross-sectional z-sores for the size of 12 standard portfolios
df_12_std_size <-  apply(t(df_12_size[, -1]), MARGIN = 2, scale)
df_12_std_size <- cbind(Dates,data.frame(t(df_12_std_size)))
colnames(df_12_std_size) <- colnames(df_12_PR)
# apply(df_12_std_size[,-1], 1, mean, na.rm =T)
####df_12_PE####
hld_PE_calcs <- function(a, b, c, port_number1, port_number2){
temp <- intersect(c[[port_number2]],b[[port_number1]])
port <- a[,temp]
port <- port %>% select_if(~sum(is.na(.)) == 0) %>% select_if(~!all(.==0))
row_mean = rollapply(port, FUN = mean, width = 1:(Holding +1), align = "right",by.column = F)
return(row_mean)
}
df_12_PE <- data.frame(Dates = df_return$Dates[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
B_Value = unlist(Map(hld_PE_calcs, holding_PE_list, HML, SMB,
port_number1 = 1, port_number2 = 2)),
B_Neutral_PE = unlist(Map(hld_PE_calcs, holding_PE_list, HML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Growth = unlist(Map(hld_PE_calcs, holding_PE_list, HML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Winner = unlist(Map(hld_PE_calcs, holding_PE_list, WML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Neutral_MOM = unlist(Map(hld_PE_calcs, holding_PE_list, RMW, SMB,
port_number1 = 2, port_number2 = 2)),
B_Loser = unlist(Map(hld_PE_calcs, holding_PE_list, WML, SMB,
port_number1 = 1, port_number2 = 2)),
S_Value = unlist(Map(hld_PE_calcs, holding_PE_list, HML, SMB,
port_number1 = 1, port_number2 = 1)),
S_Neutral_PE = unlist(Map(hld_PE_calcs, holding_PE_list, HML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Growth = unlist(Map(hld_PE_calcs, holding_PE_list, HML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Winner = unlist(Map(hld_PE_calcs, holding_PE_list, WML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Neutral_MOM = unlist(Map(hld_PE_calcs, holding_PE_list, WML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Loser = unlist(Map(hld_PE_calcs, holding_PE_list, WML, SMB,
port_number1 = 1, port_number2 = 1))
)
count_nas <- sapply(df_12_PE, function(x){sum(is.na(x))})
count_nas
df_12_std_PE <-  apply(t(df_12_PE[, -1]), MARGIN = 2, scale)
df_12_std_PE <- cbind(Dates,data.frame(t(df_12_std_PE)))
colnames(df_12_std_PE) <- colnames(df_12_PR)
apply(df_12_std_PE[,-1], 1, mean, na.rm =T)
# is.nan.data.frame <- function(x)
#   do.call(cbind, lapply(x, is.nan))
# df_12_std_size[is.nan(df_12_std_size)] <- NA
####df_12_MOM####
hld_MOM_calcs <- function(a, b, c, port_number1, port_number2){
temp <- intersect(c[[port_number2]],b[[port_number1]])
port <- a[,temp]
port <- port %>% select_if(~sum(is.na(.)) == 0) %>% select_if(~!all(.==0))
row_mean = rollapply(port, FUN = mean, width = 1:(Holding +1), align = "right",by.column = F)
return(row_mean)
}
df_12_MOM <- data.frame(Dates = df_return$Dates[-c(1:(Lookback+Gap))][1:(Periods*Holding)],
B_Value = unlist(Map(hld_MOM_calcs, holding_MOM_list, HML, SMB,
port_number1 = 1, port_number2 = 2)),
B_Neutral_MOM = unlist(Map(hld_MOM_calcs, holding_MOM_list, HML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Growth = unlist(Map(hld_MOM_calcs, holding_MOM_list, HML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Winner = unlist(Map(hld_MOM_calcs, holding_MOM_list, WML, SMB,
port_number1 = 3, port_number2 = 2)),
B_Neutral_MOM = unlist(Map(hld_MOM_calcs, holding_MOM_list, WML, SMB,
port_number1 = 2, port_number2 = 2)),
B_Loser = unlist(Map(hld_MOM_calcs, holding_MOM_list, WML, SMB,
port_number1 = 1, port_number2 = 2)),
S_Value = unlist(Map(hld_MOM_calcs, holding_MOM_list, HML, SMB,
port_number1 = 1, port_number2 = 1)),
S_Neutral_MOM = unlist(Map(hld_MOM_calcs, holding_MOM_list, HML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Growth = unlist(Map(hld_MOM_calcs, holding_MOM_list, HML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Winner = unlist(Map(hld_MOM_calcs, holding_MOM_list, WML, SMB,
port_number1 = 3, port_number2 = 1)),
S_Neutral_MOM = unlist(Map(hld_MOM_calcs, holding_MOM_list, WML, SMB,
port_number1 = 2, port_number2 = 1)),
S_Loser = unlist(Map(hld_MOM_calcs, holding_MOM_list, WML, SMB,
port_number1 = 1, port_number2 = 1))
)
count_nas <- sapply(df_12_MOM, function(x){sum(is.na(x))})
count_nas
df_12_std_MOM <-  apply(t(df_12_MOM[, -1]), MARGIN = 2, scale)
df_12_std_MOM <- cbind(Dates,data.frame(t(df_12_std_MOM)))
colnames(df_12_std_MOM) <- colnames(df_12_PR)
# is.nan.data.frame <- function(x)
#   do.call(cbind, lapply(x, is.nan))
# df_12_std_size[is.nan(df_12_std_size)] <- NA
#Newey-West Adjustment for a time-series data
ret <- c(0.37264297, -0.15778735, -0.13038129,  1.08330381, -0.11640718,
-0.05459263, -0.28703501,  1.50972202, -0.5622087 , -0.30937038)
ret
NWtest <- function (ret,h0) {
T=length(ret)
lag =  as.integer(4*(T/100)^(2/9))
vv=var(ret)
for (l in 1:lag) {
cc=cov(ret[1:(length(ret)-l)],ret[(l+1):length(ret)])
vv=vv+2*(1-l/lag)*cc}
y=(mean(ret)-h0)/sqrt(vv)*sqrt(T)
return(y)
}
t.test(ret)[1]
t_NW  = NWtest(ret,0)
t_NW
# Calculate their geometric average return
lapply(df_FF5[,-1], function (x) {exp(mean(x, na.rm = T))-1})
# Convert daily average to annual average
lapply(df_FF5[,-1], function (x) {(exp(mean(x, na.rm = T)*252))-1})
lapply(df_FF4[,-1], function (x) {(exp(mean(x, na.rm = T)*252))-1})
(exp(mean(as.numeric(df_RF$Value), na.rm = T)*252))-1
lapply(df_FF5[,-1], function(x) {sd(x)*sqrt(252)})
sd(df_FF4$WML)*sqrt(252)
lapply(df_FF5[,-1], kurtosis)
kurtosis(df_FF4$WML)
lapply(df_FF5[,-1], skewness)
skewness(df_FF4$WML)
lapply(df_FF5[,-1], function(x) {max(x)*252})
max(df_FF4$WML)*252
lapply(df_FF5[,-1], function(x) {min(x)*252})
min(df_FF4$WML)*252
# Sharpe Ratio = (Rp - Rf)/(Sigma.p) #except for market excess return
drawdown <- function(pnl) {
cum.pnl  <- c(0, cumsum(pnl))
drawdown <- cum.pnl - cummax(cum.pnl)
return(tail(drawdown, -1))
}
maxdrawdown <- function(pnl)min(drawdown(pnl))
#
# drawdown(df_FF4$WML)
#
# maxdrawdown(df_FF4$WML)
# lapply(df_FF5[,-1], maxdrawdown)
drawdown <- function(x){
tmp <- cummax(tmp)
}
maxDrawdown(df_FF4$WML)
max(rollapply(df_FF4$WML, width = 252, FUN = maxDrawdown))
lapply(df_FF5[,-1], function(x) {max(rollapply(x, width = 252, FUN = maxDrawdown))})
NWtest(df_FF4$WML,0)
lapply(df_FF5[,-1], function(x) {NWtest(x,0)})
# Investing Universe for each year
for (i in 1:Periods){
tmp <- lookback_size_list[[i]][,-1]
tmp <- tmp %>% select_if(~!all(is.na(.))) %>% select_if(~!all(.==0)) # select columns not full of 0s or NAs
print(length(colnames(tmp)))
}
# the average stock number in each double-sorted portfolio
for(i in 1:Periods){
for(j in c(1,2)){
for (k in c(1,3)){
l1 = length(intersect(SMB[[i]][[j]], HML[[i]][[k]]))
l2 = length(intersect(SMB[[i]][[j]], RMW[[i]][[k]]))
l3 = length(intersect(SMB[[i]][[j]], CMA[[i]][[k]]))
ave = mean(l1, l2, l3)
}
}
print(ave)
}
